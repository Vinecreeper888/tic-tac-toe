[{"/Users/sid/Desktop/Development/React projects/react-game/src/index.js":"1"},{"size":3860,"mtime":1608818288066,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1rfmsed","/Users/sid/Desktop/Development/React projects/react-game/src/index.js",["7"],"import React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport './index.css';\n\n//square component is now a controlled component.\nfunction Square(props) {\n    return(\n        <button \n            className=\"square\"\n            onClick={props.onClick}\n        >{props.value}</button>\n    );\n}\n  \n  class Board extends React.Component {\n\n    renderSquare(i) {\n        return (\n            <Square \n            value={this.props.squares[i]}\n            onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n    \n    render() {\n                \n        return (\n        <div>\n            <div className=\"board-row\">\n                {this.renderSquare(0)}\n                {this.renderSquare(1)}\n                {this.renderSquare(2)}\n            </div>\n            <div className=\"board-row\">\n                {this.renderSquare(3)}\n                {this.renderSquare(4)}\n                {this.renderSquare(5)}\n            </div>\n            <div className=\"board-row\">\n                {this.renderSquare(6)}\n                {this.renderSquare(7)}\n                {this.renderSquare(8)}\n            </div>\n        </div>\n      );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null),\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n        };\n    }\n\n    handleClick = (i) => {\n        //go back in time and then make a new move\n        //throw away all the future history \n        const history = this.state.history.slice(0, this.state.stepNumber+1);\n        \n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if(calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    render() {\n      const history = this.state.history;\n      const current = history[this.state.stepNumber];\n      const winner = calculateWinner(current.squares);\n\n      const moves = history.map((step,move) => {\n          const desc = move ? \n          'Go to move #'+move : \n          'Go to game start';\n          return(\n              <li key={move}>\n                  <button onClick={() => this.jumpTo(move)}>{desc}</button>\n              </li>\n          );\n      });\n\n      let status;\n      if(winner) {\n          status = 'Winner: '+winner;\n      } else {\n          status = 'Next player: '+(this.state.xIsNext ? 'X': 'O');\n      }\n\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board \n                squares = {current.squares}\n                onClick={(i) => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <ol>{moves}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  function calculateWinner(squares) {\n      const lines = [\n          [0,1,2],\n          [3,4,5],\n          [6,7,8],\n          [0,3,6],\n          [1,4,7],\n          [2,5,8],\n          [0,4,8],\n          [2,4,6],\n      ];\n      \n      for(let i = 0;i < lines.length;i++) {\n          const [a,b,c] = lines[i];\n          if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n              return squares[a];\n          }\n      }\n      return null;\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  \n\n\n    ",{"ruleId":"8","severity":1,"message":"9","line":2,"column":20,"nodeType":"10","messageId":"11","endLine":2,"endColumn":26},"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar"]